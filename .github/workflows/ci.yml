name: CI

on:
  push:
    branches: [ dev ]

env:
  AWS_REGION: ap-northeast-2
  IMAGE: public.ecr.aws/w7n1o6b8/monew

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      pr_title: ${{ steps.pr_check.outputs.pr_title }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if commit belongs to merged PR
        id: pr_check
        run: |
          PR_NUMBER=$(gh pr list --state merged --base dev --json number,mergeCommit --jq ".[] | select(.mergeCommit.oid==\"$GITHUB_SHA\") | .number")
          if [ -z "$PR_NUMBER" ]; then
            echo "Not a PR merge commit. Ending workflow successfully."
            echo "::set-output name=pr_title::Unknown PR"
            exit 0
          else
            PR_TITLE=$(gh pr view $PR_NUMBER --json title --jq ".title")
            echo "PR #$PR_NUMBER merged. Title: $PR_TITLE"
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle', '**/settings.gradle') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login AWS Public ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 \
          | docker login --username AWS --password-stdin public.ecr.aws

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Tag making (SHA)
        id: shatag
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and Push with Cache
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ steps.shatag.outputs.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max