# cd, ECS에 배포하기

name: CD Workflow

#CI가 완료되면 일단 dev에서만 ECS에 배포되게끔 구현
on:
  workflow_run:
    workflows: ["CI Workflow"]
    types: [completed]
    branches: [dev]

# 환경변수 정의
env:
  AWS_REGION: ${{ secrets.AWS_REGION }} # aws 지역
  IMAGE: ${{ secrets.AWS_ECR_URL }} # ECR의 url
  ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }} # ECS 클러스터 이름
  ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE_NAME }} # ECS 서비스 이름
  ECS_TASK_FAMILY: ${{ secrets.AWS_ECS_TASK_DEFINITION }} # ECS 태스크 정의 이름
  CONTAINER_NAME: monew-app # ECS 태스크 정의 -> 컨테이너 이름


jobs:
  desploy:
    # CD workflows가 workflow_run에 의해 호출되고 CI가 성공일경우에만 배포
#    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4

        - name: AWS ECS Configure(AWS 인증)
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        # ECS 태스크 정의 파일 만들기(컨테이너의 이미지 활용)
        - name: Task Definition file Rendering
          id: render
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: ecs/taskdef-base.json
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ env.IMAGE }}:latest

        # 새롭게 만든 ECS 태스크 정의를 등록하기, ECS에 새 태스크 정의 적용
        - name: ECS Deploy
          uses: aws-actions/amazon-ecs-deploy-task-definition@v2
          with:
            task-definition: ${{ steps.render.outputs.task-definition }} # 위의 render 참조
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true # 새로운 서비스가 안정화 될 때까지 기다림