name: CI/CD Workflow

on:
#  push:
#    branches: [refactor/infra]
#    paths-ignore: [ "README.md", "../pull_request_template.md" ]
  pull_request:
    branches: [dev, main]
    paths-ignore: ["README.md", "**/*.md"]

env:
  AWS_REGION: ap-northeast-2
  IMAGE: public.ecr.aws/w7n1o6b8/monew
  ECS_CLUSTER: cluster-monew
  ECS_SERVICE: monew-task-service-13fqphcy
  ECS_TASK_FAMILY: monew-task
  CONTAINER_NAME: monew-app

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport jacocoTestCoverageVerification --no-daemon

      - name: Upload coverage report (HTML)
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/html

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Extract coverage numbers
        id: coverage
        run: |
          XML="build/reports/jacoco/test/jacocoTestReport.xml"
          COVERED=$(xmllint --xpath "string(//counter[@type='LINE']/@covered)" "$XML" 2>/dev/null || echo 0)
          MISSED=$(xmllint --xpath "string(//counter[@type='LINE']/@missed)" "$XML" 2>/dev/null || echo 0)
          TOTAL=$((COVERED + MISSED))
          PCT=$(awk "BEGIN { if ($TOTAL==0) print 0; else printf \"%.2f\", ($COVERED/$TOTAL)*100 }")
          echo "covered=$COVERED" >> $GITHUB_OUTPUT
          echo "missed=$MISSED" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "pct=$PCT" >> $GITHUB_OUTPUT

      - name: Post coverage comment PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: jacoco-coverage
          message: |
            ## JaCoCo Coverage Report
            - **CoverageLine** ${{ steps.coverage.outputs.pct }}% (${{ steps.coverage.outputs.covered }} / ${{ steps.coverage.outputs.total }})
            - **Missed** ${{ steps.coverage.outputs.missed }}
            - [HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login AWS Public ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 \
          | docker login --username AWS --password-stdin public.ecr.aws

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: tag making(SHA)
        id: shatag
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build Docker image and push
        run: |
          docker buildx build \
          --platform linux/amd64,linux/arm64 \
          -t $IMAGE:latest \
          -t $IMAGE:${{ steps.shatag.outputs.SHORT_SHA }} \
          --push .

  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: AWS ECS Configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 1. 기존 태스크 종료
      - name: Stop running ECS tasks
        run: |
          CLUSTER="${{ env.ECS_CLUSTER }}"
          SERVICE="${{ env.ECS_SERVICE }}"
          # 실행 중인 태스크 ARN 가져오기
          TASKS=$(aws ecs list-tasks --cluster $CLUSTER --service-name $SERVICE --desired-status RUNNING --query 'taskArns' --output text)
          if [ -n "$TASKS" ]; then
            echo "Stopping running tasks: $TASKS"
            aws ecs stop-task --cluster $CLUSTER --task $TASKS
          else
            echo "No running tasks found."
          fi

      # 2. Task Definition Rendering
      - name: Task Definition file Rendering
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/taskdef-base.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE }}:latest

      # 3. Task Definition 등록 및 서비스 업데이트
      - name: ECS Deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ecs/taskdef-base.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true